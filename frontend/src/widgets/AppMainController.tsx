import React, { useState } from 'react';
import { SelectItem } from './base/Select';
import { TabContentBtn } from './tabs/common/TabButtonsWidget';
import AppMainView from './views/AppMainView';

const ENGLISH: SelectItem = { itemId: 'eng', displayText: 'English' };
const UA: SelectItem = { itemId: 'ua', displayText: 'Ukrainian' };
const CROATIAN: SelectItem = { itemId: 'croat', displayText: 'Croatian' };
const inputLangs: SelectItem[] = [ENGLISH, UA, CROATIAN];
const outputLangs: SelectItem[] = [ENGLISH, UA, CROATIAN];
const proofreadingButtons: TabContentBtn[] = [
    { btnId: 'proof', btnName: 'Proofread' },
    { btnId: 'semi', btnName: 'Semiformal' },
    { btnId: 'formal', btnName: 'Formal' },
    { btnId: 'casual', btnName: 'Casual' },
];
const formattingButtons: TabContentBtn[] = [
    { btnId: 'email', btnName: 'Email' },
    { btnId: 'article', btnName: 'Article' },
    { btnId: 'post', btnName: 'Social Post' },
];
const translateButtons: TabContentBtn[] = [
    { btnId: 'translate', btnName: 'Translate' },
    { btnId: 'tr_tbl', btnName: 'Translate Table' },
];
const summaryButtons: TabContentBtn[] = [
    { btnId: 'email', btnName: 'Email' },
    { btnId: 'article', btnName: 'Article' },
    { btnId: 'post1', btnName: 'Social Post' },
    { btnId: 'post2', btnName: 'post2' },
    { btnId: 'post3', btnName: 'post3' },
    { btnId: 'post4', btnName: 'post4' },
    { btnId: 'post5', btnName: 'post5' },
    { btnId: 'post6', btnName: 'post6' },
    { btnId: 'post7', btnName: 'post7' },
    { btnId: 'post8', btnName: 'post8' },
    { btnId: 'post9', btnName: 'post9' },
    { btnId: 'post10', btnName: 'post10' },
    { btnId: 'post11', btnName: 'post11' },
    { btnId: 'post12', btnName: 'post12' },
    { btnId: 'post13', btnName: 'post13' },
    { btnId: 'post14', btnName: 'post14' },
    { btnId: 'post15', btnName: 'post15' },
    { btnId: 'post16', btnName: 'post16' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
    { btnId: 'post17', btnName: 'post17' },
];

// Stub transformation functions
const transformProofread = (text: string) => text.replace(/\b\w/g, (c) => c.toUpperCase());

const transformSemiFormal = (text: string) =>
    text
        .split('. ')
        .map((s) => s.charAt(0).toUpperCase() + s.slice(1).toLowerCase())
        .join('. ');

const transformFormal = (text: string) => text.toUpperCase();

const transformCasual = (text: string) => text.toLowerCase().replace(/\. /g, ' ðŸ˜Š ');

const transformEmail = (text: string) => `Dear User,\n\n${text}\n\nBest regards,\nYour Assistant`;

const transformArticle = (text: string) => `# Article Title\n\n${text}\n\n---\n*Generated by Text Processor*`;

const transformSocialPost = (text: string) => `${text}\n\n#textprocessor #content`;

const transformTranslate = (text: string, from: string, to: string) =>
    `[${from}â†’${to}] ${text.split('').reverse().join('')}`;

const transformTable = (text: string) =>
    `| Input | Output |\n|-------|--------|\n| ${text.substring(0, 20)}... | [translated] |`;

const AppMainController: React.FC = () => {
    // Local state management
    const [inputContent, setInputContent] = useState<string>('');
    const [outputContent, setOutputContent] = useState<string>('');
    const [inputLanguage, setInputLanguage] = useState<SelectItem>(ENGLISH);
    const [outputLanguage, setOutputLanguage] = useState<SelectItem>(UA);
    const [currentTask, setCurrentTask] = useState<string>('Idle');
    const [isProcessing, setIsProcessing] = useState<boolean>(false);

    // Sample text for the paste operation
    const SAMPLE_TEXT =
        'Hello! This is a sample text for processing. It contains multiple sentences to test different operations.';

    // Settings click handler
    const onSettingsClick = () => {
        console.log('Opening settings modal');
        alert('Settings functionality will be implemented later');
    };

    // Input operations
    const onInputPasteBtnClick = () => {
        console.log('Pasting sample text');
        setInputContent(SAMPLE_TEXT);
        setOutputContent(''); // Reset output when input changes
    };

    const onBtnInputClearClick = () => {
        console.log('Clearing input');
        setInputContent('');
        setOutputContent(''); // Clear output when input is cleared
    };

    const onInputContentChange = (content: string) => {
        setInputContent(content);
        // Reset output if input changes while idle
        if (currentTask === 'Idle') setOutputContent('');
    };

    const onInputLanguageChanged = (item: SelectItem) => {
        console.log(`Input language changed to: ${item.displayText}`);
        setInputLanguage(item);
        // Clear output when the language changes
        setOutputContent('');
    };

    // Output operations
    const onBtnOutputCopyClick = () => {
        console.log('Copying output to clipboard');
        if (outputContent) {
            navigator.clipboard
                .writeText(outputContent)
                .then(() => alert('Copied to clipboard!'))
                .catch((e) => console.error('Copy failed:', e));
        }
    };

    const onBtnOutputClearClick = () => {
        console.log('Clearing output');
        setOutputContent('');
    };

    const onOutputContentChange = (content: string) => {
        setOutputContent(content);
    };

    const onOutputLanguageChanged = (item: SelectItem) => {
        console.log(`Output language changed to: ${item.displayText}`);
        setOutputLanguage(item);
        // Reset output when the language changes
        setOutputContent('');
    };

    // Operation handlers
    const onOperationBtnClick = (op: string) => {
        console.log(`Processing operation: ${op}`);

        // Reset output and show the processing state
        setOutputContent('Processing...');
        setIsProcessing(true);
        setCurrentTask(op);

        // Simulate async processing with timeout
        setTimeout(() => {
            let result;

            // Apply appropriate transformation
            switch (op) {
                case 'proof':
                    result = transformProofread(inputContent);
                    break;
                case 'semi':
                    result = transformSemiFormal(inputContent);
                    break;
                case 'formal':
                    result = transformFormal(inputContent);
                    break;
                case 'casual':
                    result = transformCasual(inputContent);
                    break;
                case 'email':
                    result = transformEmail(inputContent);
                    break;
                case 'article':
                    result = transformArticle(inputContent);
                    break;
                case 'post':
                    result = transformSocialPost(inputContent);
                    break;
                case 'translate':
                    result = transformTranslate(inputContent, inputLanguage.displayText, outputLanguage.displayText);
                    break;
                case 'tr_tbl':
                    result = transformTable(inputContent);
                    break;
                default:
                    result = inputContent;
            }

            // Update output and state
            setOutputContent(result || 'No input provided');
            setIsProcessing(false);
            setCurrentTask('Completed');

            // Reset to idle state after delay
            setTimeout(() => setCurrentTask('Idle'), 3000);
        }, 800);
    };

    return (
        <AppMainView
            proofreadingButtons={proofreadingButtons}
            formattingButtons={formattingButtons}
            translatingButtons={translateButtons}
            summaryButtons={summaryButtons}
            currentProviderName={isProcessing ? 'Processing...' : 'Stub Provider'}
            currentModelName="Stub Model v1.0"
            currentTaskName={currentTask}
            inputContent={inputContent}
            inputLanguages={inputLangs}
            inputLanguage={inputLanguage}
            outputContent={outputContent}
            outputLanguages={outputLangs}
            outputLanguage={outputLanguage}
            onBtnSettingsClick={onSettingsClick}
            onBtnInputPasteClick={onInputPasteBtnClick}
            onBtnInputClearClick={onBtnInputClearClick}
            onBtnOutputCopyClick={onBtnOutputCopyClick}
            onBtnOutputClearClick={onBtnOutputClearClick}
            onInputLanguageChanged={onInputLanguageChanged}
            onOutputLanguageChanged={onOutputLanguageChanged}
            onInputContentChange={onInputContentChange}
            onOutputContentChange={onOutputContentChange}
            onBtnOutputUseAsInputClick={onBtnOutputClearClick}
            onOperationBtnClick={onOperationBtnClick}
            disabled={isProcessing}
        />
    );
};
AppMainController.displayName = 'AppMainController';

export default AppMainController;
